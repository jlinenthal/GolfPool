{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GoogleSpreadsheet","require","GolfApp","props","state","isLoading","rows","standings","cutline","doc","useApiKey","loadInfo","sheet","sheetsByIndex","getRows","fetch","leaderboard","json","data","newstandings","i","length","player","firstName","lastName","displayRank","position","displayValue","rank","substring","score","toPar","cutLine","this","setState","results","cutlinedisp","sort","b","a","G1","G2","G3","Fragment","colSpan","map","User","style","backgroundColor","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb499891.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport _ from 'lodash';\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\ninterface IProps {\n}\n\ninterface IState {\n  rows: IResultRow[];\n  isLoading: boolean;\n  standings: object;\n  cutline: number;\n}\n\ninterface IResultRow { \n  Time: string,\n  User: string,\n  G1: string,\n  G1Score: number,\n  G1Rank: number,\n  G2: string,\n  G2Score: number,\n  G2Rank: number,\n  G3: string,\n  G3Score: number,\n  G3Rank: number\n}\nclass GolfApp extends React.Component<IProps,IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n        isLoading: true,\n        rows: [],\n        standings: {},\n        cutline: 100\n    };\n}\n  \n  async componentDidMount() {\n    const doc = new GoogleSpreadsheet('1cBH5gIIXHI0S8zW5Hb6_9ReAkbtAK0OJsiNXfBPbyos');\n    doc.useApiKey('AIzaSyAbBjPSTC_UlABjvDGH0P4c7IhUS9Kwcw4');\n    await doc.loadInfo();\n    const sheet = doc.sheetsByIndex[0];\n    const rows = await sheet.getRows();\n\n    let leaderboard = await fetch('https://gripapi-static-pd.usopen.com/gripapi/leaderboard.json');\n    let data = await leaderboard.json();\n    //console.log(data);\n    \n    let standings = data.standings;\n    let newstandings = {};    \n    for(let i=0;i < standings.length; i++) {\n      let player : string = standings[i].player.firstName + \" \" + standings[i].player.lastName;\n      let displayRank = standings[i].position.displayValue;\n      let rank = displayRank[0] == 'T' ? displayRank.substring(1)*1 : displayRank*1;\n      let score = standings[i].toPar.displayValue;\n      newstandings[player] = {rank, displayRank, score};\n    }\n    let cutline = data.cutLine.score[0] == '+' ? data.cutLine.score.substring(1)*1 : data.cutLine.score*1;\n\n    this.setState({\n      isLoading: false,\n      rows: rows,\n      standings: newstandings,\n      cutline: cutline\n    });\n    \n  }\n  render() {\n    let results = this.state.rows;\n    if(this.state.isLoading) {\n      return (\n        <div>Loading...</div>\n      );\n    }\n    else {\n      let standings = this.state.standings;\n      let cutline = this.state.cutline;\n      let cutlinedisp = cutline == 0 ? 'E' : cutline > 0 ? '+' + cutline : cutline+'';\n      results = results.sort((b,a) => (standings[b.G1].rank+standings[b.G2].rank+standings[b.G3].rank) - (standings[a.G1].rank+standings[a.G2].rank+standings[a.G3].rank)  )\n      return (\n        <React.Fragment>\n        <p><b>Projected Cut: </b>{cutlinedisp}</p>\n        <table>\n          <tr><th>Name</th><th colSpan={3}>Pick 1</th><th colSpan={3}>Pick 2</th><th colSpan={3}>Pick 3</th><th>Score</th></tr>\n          {results.map(player => (\n            <tr>\n            <td>{ player.User }</td>\n            <td style = {{\n              backgroundColor:standings[player.G1].score > cutline ? \"lightCoral\" : \"none\"\n            }}>{ player.G1 }</td>\n            <td>{standings[player.G1].score }</td>\n            <td style={{\n                        textAlign:\"center\"\n                      }}>{ standings[player.G1].displayRank}</td>\n            <td style = {{\n              backgroundColor:standings[player.G2].score > cutline ? \"lightCoral\" : \"none\"\n            }}>{ player.G2 }</td>\n            <td>{standings[player.G2].score }</td>\n            <td style={{\n                        textAlign:\"center\"\n                      }}>{ standings[player.G2].displayRank}</td>\n            <td style = {{\n              backgroundColor:standings[player.G3].score > cutline ? \"lightCoral\" : \"none\"\n            }}> { player.G3 }</td>\n            <td>{standings[player.G3].score }</td>\n            <td style={{\n                        textAlign:\"center\"\n                      }}>{ standings[player.G3].displayRank}</td>\n            <td style={{\n                        textAlign:\"center\"\n                      }}>{ standings[player.G1].rank+standings[player.G2].rank+standings[player.G3].rank}</td>\n            </tr>\n          ))}\n        </table>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default GolfApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}